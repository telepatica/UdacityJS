udacity question: https://knowledge.udacity.com/questions/941289

import sharp from 'sharp';


const importImage = (req: express.Request, res: express.Response, next:function) => {
  let image = sharp.input('./upload/treelady');
  console.log('image pulled');
  next();
}


sharp.resize(400,400);


const sharp = (input: sharp.input, resize: sharp.resize):
void => {
  let input = sharp.input('./uploads/treelady');
  let resize =
}


const importImage = (input: sharp.input):
void => {
  let input = input('./uploads/treelady');
}



export default importImage;


____
const sharp = (resize: sharp.resize, on: sharp.on, pipe: sharp.pipe):void => {
  let size = resize.size(300);
  let info = on.info;
  console.log('image height is' + info.size);
});

sharp.input() => {
  input.resize(200,300, {
    fit: 'inside',
    gravity: 'center'}
  });


  let resizedPhoto:
     await sharp(,) => {
       sharp.resize({ width: 400, height: 400, fit: 'fill' })
       sharp.toBuffer()
       sharp.then((data) => {
         resizedPhoto = data
       })
       sharp.catch((err) => {});
     };

     //resize any image
     const newPayload = await sharp(localurl)
         .resize({ width: width, height: height});
     reply
         .code(200)
         .type('image/jpeg')
         .send(newPayload)
         .cache(false);



_______________________________________
(Working 28.22)

sharp((ResizeImage) => {
  const NewImage = (): Promise<any> => {
    return new Promise((resolve, reject) => {
      setTimeout(() =>  {
        try {
          sharp.resize({
            width: 400,
            height:400,
            fit: sharp.fit.cover,
            postion: sharp.gravity.center});
          resolve();
        } catch (error) {
          reject('sharp file error');
        }
      return()
      }, 1000);
    });
  };
});

_______________________________________
Not Working
import sharp from 'sharp';


sharp((localurl) => {
  const newPayload = (): Promise<any> => {
    return new Promise((resolve, reject) => {
      setTimeout(() =>  {
        try {
          sharp.resize({
            width: 200,
            height: 200,
            fit: sharp.fit.cover,
            postion: sharp.gravity.center});
          resolve('sucess');
        } catch (error) {
          reject('error');
        }
      return(
        sharp.code(200),
        sharp.type('image/png'),
        sharp.send(newPayload)
      )
      }, 1000);
    });
  };
});


export default sharp;


_______________________________________
working (index.ts)
import express from 'express'

const app = express();
const port = 3000;


//define route handler ImageProcessor, sendFile from local machine
app.get('/ImageProcessor', (req, res) => {
  res.sendFile('/Users/brittanysalas/Documents/ImageProessingAPI/upload/treelady.png');
});



// start the Express server
app.listen(port, ()=> {
 console.log('server started at http://localhost:${port}');
});



______
to go in index.ts
import newPayload from '../utilities/sharp';



______
at bottom of resized image
fit: sharp.fit.cover,
postion: sharp.gravity.center});

_____
export const newPayload = ((file: unknown): void  => {
      return new resize ((width, height, fit, position) => {
        width(200),
        height(200)
      });
});
_____export const newPayload = ((file: unknown): void  => {
      return new resize ((width, height, fit, position) => {
        width(200),
        height(200)
      });
});
fit: sharp.fit.cover,
postion: sharp.gravity.center});

_______________________________________
const resize = (
  w: sharp.resize.width,
  h: sharp.resize.height,
  f: sharp.resize.fit,
  p: sharp.resize.gravity.position
): void => {};


app.resize((w,g,f,p) => {
  resize.w: 200;
  h.200;
  f.cover;
  p.gravity.center
});
